/*
Blnk

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the RecordTransactionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecordTransactionRequest{}

// RecordTransactionRequest struct for RecordTransactionRequest
type RecordTransactionRequest struct {
	Amount    int32  `json:"amount"`
	Reference string `json:"reference"`
	//
	Sources []Source `json:"sources"`
	//
	Destinations   []Destination `json:"destinations"`
	Currency       string        `json:"currency"`
	Source         string        `json:"source"`
	Destination    string        `json:"destination"`
	AllowOverDraft bool          `json:"allow_over_draft"`
	Inflight       bool          `json:"inflight"`
}

type _RecordTransactionRequest RecordTransactionRequest

// NewRecordTransactionRequest instantiates a new RecordTransactionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordTransactionRequest(amount int32, reference string, sources []Source, destinations []Destination, currency string, source string, destination string, allowOverDraft bool, inflight bool) *RecordTransactionRequest {
	this := RecordTransactionRequest{}
	this.Amount = amount
	this.Reference = reference
	this.Sources = sources
	this.Destinations = destinations
	this.Currency = currency
	this.Source = source
	this.Destination = destination
	this.AllowOverDraft = allowOverDraft
	this.Inflight = inflight
	return &this
}

// NewRecordTransactionRequestWithDefaults instantiates a new RecordTransactionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordTransactionRequestWithDefaults() *RecordTransactionRequest {
	this := RecordTransactionRequest{}
	return &this
}

// GetAmount returns the Amount field value
func (o *RecordTransactionRequest) GetAmount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *RecordTransactionRequest) GetAmountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *RecordTransactionRequest) SetAmount(v int32) {
	o.Amount = v
}

// GetReference returns the Reference field value
func (o *RecordTransactionRequest) GetReference() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value
// and a boolean to check if the value has been set.
func (o *RecordTransactionRequest) GetReferenceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reference, true
}

// SetReference sets field value
func (o *RecordTransactionRequest) SetReference(v string) {
	o.Reference = v
}

// GetSources returns the Sources field value
func (o *RecordTransactionRequest) GetSources() []Source {
	if o == nil {
		var ret []Source
		return ret
	}

	return o.Sources
}

// GetSourcesOk returns a tuple with the Sources field value
// and a boolean to check if the value has been set.
func (o *RecordTransactionRequest) GetSourcesOk() ([]Source, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sources, true
}

// SetSources sets field value
func (o *RecordTransactionRequest) SetSources(v []Source) {
	o.Sources = v
}

// GetDestinations returns the Destinations field value
func (o *RecordTransactionRequest) GetDestinations() []Destination {
	if o == nil {
		var ret []Destination
		return ret
	}

	return o.Destinations
}

// GetDestinationsOk returns a tuple with the Destinations field value
// and a boolean to check if the value has been set.
func (o *RecordTransactionRequest) GetDestinationsOk() ([]Destination, bool) {
	if o == nil {
		return nil, false
	}
	return o.Destinations, true
}

// SetDestinations sets field value
func (o *RecordTransactionRequest) SetDestinations(v []Destination) {
	o.Destinations = v
}

// GetCurrency returns the Currency field value
func (o *RecordTransactionRequest) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *RecordTransactionRequest) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *RecordTransactionRequest) SetCurrency(v string) {
	o.Currency = v
}

// GetSource returns the Source field value
func (o *RecordTransactionRequest) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *RecordTransactionRequest) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *RecordTransactionRequest) SetSource(v string) {
	o.Source = v
}

// GetDestination returns the Destination field value
func (o *RecordTransactionRequest) GetDestination() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value
// and a boolean to check if the value has been set.
func (o *RecordTransactionRequest) GetDestinationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Destination, true
}

// SetDestination sets field value
func (o *RecordTransactionRequest) SetDestination(v string) {
	o.Destination = v
}

// GetAllowOverDraft returns the AllowOverDraft field value
func (o *RecordTransactionRequest) GetAllowOverDraft() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AllowOverDraft
}

// GetAllowOverDraftOk returns a tuple with the AllowOverDraft field value
// and a boolean to check if the value has been set.
func (o *RecordTransactionRequest) GetAllowOverDraftOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllowOverDraft, true
}

// SetAllowOverDraft sets field value
func (o *RecordTransactionRequest) SetAllowOverDraft(v bool) {
	o.AllowOverDraft = v
}

// GetInflight returns the Inflight field value
func (o *RecordTransactionRequest) GetInflight() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Inflight
}

// GetInflightOk returns a tuple with the Inflight field value
// and a boolean to check if the value has been set.
func (o *RecordTransactionRequest) GetInflightOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Inflight, true
}

// SetInflight sets field value
func (o *RecordTransactionRequest) SetInflight(v bool) {
	o.Inflight = v
}

func (o RecordTransactionRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecordTransactionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount"] = o.Amount
	toSerialize["reference"] = o.Reference
	toSerialize["sources"] = o.Sources
	toSerialize["destinations"] = o.Destinations
	toSerialize["currency"] = o.Currency
	toSerialize["source"] = o.Source
	toSerialize["destination"] = o.Destination
	toSerialize["allow_over_draft"] = o.AllowOverDraft
	toSerialize["inflight"] = o.Inflight
	return toSerialize, nil
}

func (o *RecordTransactionRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"amount",
		"reference",
		"sources",
		"destinations",
		"currency",
		"source",
		"destination",
		"allow_over_draft",
		"inflight",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecordTransactionRequest := _RecordTransactionRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecordTransactionRequest)

	if err != nil {
		return err
	}

	*o = RecordTransactionRequest(varRecordTransactionRequest)

	return err
}

type NullableRecordTransactionRequest struct {
	value *RecordTransactionRequest
	isSet bool
}

func (v NullableRecordTransactionRequest) Get() *RecordTransactionRequest {
	return v.value
}

func (v *NullableRecordTransactionRequest) Set(val *RecordTransactionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordTransactionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordTransactionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordTransactionRequest(val *RecordTransactionRequest) *NullableRecordTransactionRequest {
	return &NullableRecordTransactionRequest{value: val, isSet: true}
}

func (v NullableRecordTransactionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordTransactionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
