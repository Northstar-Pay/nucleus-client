/*
Blnk

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the MetaData2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetaData2{}

// MetaData2 struct for MetaData2
type MetaData2 struct {
	Verified  bool   `json:"verified"`
	Reference string `json:"reference"`
}

type _MetaData2 MetaData2

// NewMetaData2 instantiates a new MetaData2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetaData2(verified bool, reference string) *MetaData2 {
	this := MetaData2{}
	this.Verified = verified
	this.Reference = reference
	return &this
}

// NewMetaData2WithDefaults instantiates a new MetaData2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetaData2WithDefaults() *MetaData2 {
	this := MetaData2{}
	return &this
}

// GetVerified returns the Verified field value
func (o *MetaData2) GetVerified() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Verified
}

// GetVerifiedOk returns a tuple with the Verified field value
// and a boolean to check if the value has been set.
func (o *MetaData2) GetVerifiedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Verified, true
}

// SetVerified sets field value
func (o *MetaData2) SetVerified(v bool) {
	o.Verified = v
}

// GetReference returns the Reference field value
func (o *MetaData2) GetReference() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value
// and a boolean to check if the value has been set.
func (o *MetaData2) GetReferenceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reference, true
}

// SetReference sets field value
func (o *MetaData2) SetReference(v string) {
	o.Reference = v
}

func (o MetaData2) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetaData2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["verified"] = o.Verified
	toSerialize["reference"] = o.Reference
	return toSerialize, nil
}

func (o *MetaData2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"verified",
		"reference",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMetaData2 := _MetaData2{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMetaData2)

	if err != nil {
		return err
	}

	*o = MetaData2(varMetaData2)

	return err
}

type NullableMetaData2 struct {
	value *MetaData2
	isSet bool
}

func (v NullableMetaData2) Get() *MetaData2 {
	return v.value
}

func (v *NullableMetaData2) Set(val *MetaData2) {
	v.value = val
	v.isSet = true
}

func (v NullableMetaData2) IsSet() bool {
	return v.isSet
}

func (v *NullableMetaData2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetaData2(val *MetaData2) *NullableMetaData2 {
	return &NullableMetaData2{value: val, isSet: true}
}

func (v NullableMetaData2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetaData2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
