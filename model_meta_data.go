/*
Blnk

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the MetaData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetaData{}

// MetaData struct for MetaData
type MetaData struct {
	ProjectOwner string `json:"project_owner"`
}

type _MetaData MetaData

// NewMetaData instantiates a new MetaData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetaData(projectOwner string) *MetaData {
	this := MetaData{}
	this.ProjectOwner = projectOwner
	return &this
}

// NewMetaDataWithDefaults instantiates a new MetaData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetaDataWithDefaults() *MetaData {
	this := MetaData{}
	return &this
}

// GetProjectOwner returns the ProjectOwner field value
func (o *MetaData) GetProjectOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectOwner
}

// GetProjectOwnerOk returns a tuple with the ProjectOwner field value
// and a boolean to check if the value has been set.
func (o *MetaData) GetProjectOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectOwner, true
}

// SetProjectOwner sets field value
func (o *MetaData) SetProjectOwner(v string) {
	o.ProjectOwner = v
}

func (o MetaData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetaData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["project_owner"] = o.ProjectOwner
	return toSerialize, nil
}

func (o *MetaData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"project_owner",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMetaData := _MetaData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMetaData)

	if err != nil {
		return err
	}

	*o = MetaData(varMetaData)

	return err
}

type NullableMetaData struct {
	value *MetaData
	isSet bool
}

func (v NullableMetaData) Get() *MetaData {
	return v.value
}

func (v *NullableMetaData) Set(val *MetaData) {
	v.value = val
	v.isSet = true
}

func (v NullableMetaData) IsSet() bool {
	return v.isSet
}

func (v *NullableMetaData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetaData(val *MetaData) *NullableMetaData {
	return &NullableMetaData{value: val, isSet: true}
}

func (v NullableMetaData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetaData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
