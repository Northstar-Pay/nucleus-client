/*
Blnk

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the RecordTransaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecordTransaction{}

// RecordTransaction struct for RecordTransaction
type RecordTransaction struct {
	Amount         int32          `json:"amount"`
	Id             string         `json:"id"`
	AllowOverdraft bool           `json:"allow_overdraft"`
	Infligt        bool           `json:"infligt"`
	Source         string         `json:"source"`
	Destination    string         `json:"destination"`
	Reference      string         `json:"reference"`
	Currency       string         `json:"currency"`
	Description    string         `json:"description"`
	Status         string         `json:"status"`
	Hash           string         `json:"hash"`
	GroupIds       NullableString `json:"group_ids"`
	CreatedAt      string         `json:"created_at"`
	ScheduledFor   string         `json:"scheduled_for"`
}

type _RecordTransaction RecordTransaction

// NewRecordTransaction instantiates a new RecordTransaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordTransaction(amount int32, id string, allowOverdraft bool, infligt bool, source string, destination string, reference string, currency string, description string, status string, hash string, groupIds NullableString, createdAt string, scheduledFor string) *RecordTransaction {
	this := RecordTransaction{}
	this.Amount = amount
	this.Id = id
	this.AllowOverdraft = allowOverdraft
	this.Infligt = infligt
	this.Source = source
	this.Destination = destination
	this.Reference = reference
	this.Currency = currency
	this.Description = description
	this.Status = status
	this.Hash = hash
	this.GroupIds = groupIds
	this.CreatedAt = createdAt
	this.ScheduledFor = scheduledFor
	return &this
}

// NewRecordTransactionWithDefaults instantiates a new RecordTransaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordTransactionWithDefaults() *RecordTransaction {
	this := RecordTransaction{}
	return &this
}

// GetAmount returns the Amount field value
func (o *RecordTransaction) GetAmount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *RecordTransaction) GetAmountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *RecordTransaction) SetAmount(v int32) {
	o.Amount = v
}

// GetId returns the Id field value
func (o *RecordTransaction) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RecordTransaction) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RecordTransaction) SetId(v string) {
	o.Id = v
}

// GetAllowOverdraft returns the AllowOverdraft field value
func (o *RecordTransaction) GetAllowOverdraft() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AllowOverdraft
}

// GetAllowOverdraftOk returns a tuple with the AllowOverdraft field value
// and a boolean to check if the value has been set.
func (o *RecordTransaction) GetAllowOverdraftOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllowOverdraft, true
}

// SetAllowOverdraft sets field value
func (o *RecordTransaction) SetAllowOverdraft(v bool) {
	o.AllowOverdraft = v
}

// GetInfligt returns the Infligt field value
func (o *RecordTransaction) GetInfligt() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Infligt
}

// GetInfligtOk returns a tuple with the Infligt field value
// and a boolean to check if the value has been set.
func (o *RecordTransaction) GetInfligtOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Infligt, true
}

// SetInfligt sets field value
func (o *RecordTransaction) SetInfligt(v bool) {
	o.Infligt = v
}

// GetSource returns the Source field value
func (o *RecordTransaction) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *RecordTransaction) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *RecordTransaction) SetSource(v string) {
	o.Source = v
}

// GetDestination returns the Destination field value
func (o *RecordTransaction) GetDestination() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value
// and a boolean to check if the value has been set.
func (o *RecordTransaction) GetDestinationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Destination, true
}

// SetDestination sets field value
func (o *RecordTransaction) SetDestination(v string) {
	o.Destination = v
}

// GetReference returns the Reference field value
func (o *RecordTransaction) GetReference() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value
// and a boolean to check if the value has been set.
func (o *RecordTransaction) GetReferenceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reference, true
}

// SetReference sets field value
func (o *RecordTransaction) SetReference(v string) {
	o.Reference = v
}

// GetCurrency returns the Currency field value
func (o *RecordTransaction) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *RecordTransaction) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *RecordTransaction) SetCurrency(v string) {
	o.Currency = v
}

// GetDescription returns the Description field value
func (o *RecordTransaction) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *RecordTransaction) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *RecordTransaction) SetDescription(v string) {
	o.Description = v
}

// GetStatus returns the Status field value
func (o *RecordTransaction) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *RecordTransaction) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *RecordTransaction) SetStatus(v string) {
	o.Status = v
}

// GetHash returns the Hash field value
func (o *RecordTransaction) GetHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hash
}

// GetHashOk returns a tuple with the Hash field value
// and a boolean to check if the value has been set.
func (o *RecordTransaction) GetHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hash, true
}

// SetHash sets field value
func (o *RecordTransaction) SetHash(v string) {
	o.Hash = v
}

// GetGroupIds returns the GroupIds field value
// If the value is explicit nil, the zero value for string will be returned
func (o *RecordTransaction) GetGroupIds() string {
	if o == nil || o.GroupIds.Get() == nil {
		var ret string
		return ret
	}

	return *o.GroupIds.Get()
}

// GetGroupIdsOk returns a tuple with the GroupIds field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecordTransaction) GetGroupIdsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GroupIds.Get(), o.GroupIds.IsSet()
}

// SetGroupIds sets field value
func (o *RecordTransaction) SetGroupIds(v string) {
	o.GroupIds.Set(&v)
}

// GetCreatedAt returns the CreatedAt field value
func (o *RecordTransaction) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *RecordTransaction) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *RecordTransaction) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetScheduledFor returns the ScheduledFor field value
func (o *RecordTransaction) GetScheduledFor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ScheduledFor
}

// GetScheduledForOk returns a tuple with the ScheduledFor field value
// and a boolean to check if the value has been set.
func (o *RecordTransaction) GetScheduledForOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScheduledFor, true
}

// SetScheduledFor sets field value
func (o *RecordTransaction) SetScheduledFor(v string) {
	o.ScheduledFor = v
}

func (o RecordTransaction) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecordTransaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount"] = o.Amount
	toSerialize["id"] = o.Id
	toSerialize["allow_overdraft"] = o.AllowOverdraft
	toSerialize["infligt"] = o.Infligt
	toSerialize["source"] = o.Source
	toSerialize["destination"] = o.Destination
	toSerialize["reference"] = o.Reference
	toSerialize["currency"] = o.Currency
	toSerialize["description"] = o.Description
	toSerialize["status"] = o.Status
	toSerialize["hash"] = o.Hash
	toSerialize["group_ids"] = o.GroupIds.Get()
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["scheduled_for"] = o.ScheduledFor
	return toSerialize, nil
}

func (o *RecordTransaction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"amount",
		"id",
		"allow_overdraft",
		"infligt",
		"source",
		"destination",
		"reference",
		"currency",
		"description",
		"status",
		"hash",
		"group_ids",
		"created_at",
		"scheduled_for",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecordTransaction := _RecordTransaction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecordTransaction)

	if err != nil {
		return err
	}

	*o = RecordTransaction(varRecordTransaction)

	return err
}

type NullableRecordTransaction struct {
	value *RecordTransaction
	isSet bool
}

func (v NullableRecordTransaction) Get() *RecordTransaction {
	return v.value
}

func (v *NullableRecordTransaction) Set(val *RecordTransaction) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordTransaction(val *RecordTransaction) *NullableRecordTransaction {
	return &NullableRecordTransaction{value: val, isSet: true}
}

func (v NullableRecordTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
