/*
Blnk

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the MetaData1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetaData1{}

// MetaData1 struct for MetaData1
type MetaData1 struct {
	RefundedTransactionId string `json:"refunded_transaction_id"`
}

type _MetaData1 MetaData1

// NewMetaData1 instantiates a new MetaData1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetaData1(refundedTransactionId string) *MetaData1 {
	this := MetaData1{}
	this.RefundedTransactionId = refundedTransactionId
	return &this
}

// NewMetaData1WithDefaults instantiates a new MetaData1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetaData1WithDefaults() *MetaData1 {
	this := MetaData1{}
	return &this
}

// GetRefundedTransactionId returns the RefundedTransactionId field value
func (o *MetaData1) GetRefundedTransactionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RefundedTransactionId
}

// GetRefundedTransactionIdOk returns a tuple with the RefundedTransactionId field value
// and a boolean to check if the value has been set.
func (o *MetaData1) GetRefundedTransactionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RefundedTransactionId, true
}

// SetRefundedTransactionId sets field value
func (o *MetaData1) SetRefundedTransactionId(v string) {
	o.RefundedTransactionId = v
}

func (o MetaData1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetaData1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["refunded_transaction_id"] = o.RefundedTransactionId
	return toSerialize, nil
}

func (o *MetaData1) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"refunded_transaction_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMetaData1 := _MetaData1{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMetaData1)

	if err != nil {
		return err
	}

	*o = MetaData1(varMetaData1)

	return err
}

type NullableMetaData1 struct {
	value *MetaData1
	isSet bool
}

func (v NullableMetaData1) Get() *MetaData1 {
	return v.value
}

func (v *NullableMetaData1) Set(val *MetaData1) {
	v.value = val
	v.isSet = true
}

func (v NullableMetaData1) IsSet() bool {
	return v.isSet
}

func (v *NullableMetaData1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetaData1(val *MetaData1) *NullableMetaData1 {
	return &NullableMetaData1{value: val, isSet: true}
}

func (v NullableMetaData1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetaData1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
